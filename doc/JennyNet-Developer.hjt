<Treepad version 2.7 UUID=ef744263bad8954466707157bb71966e>
dt=Text
<node>
JennyNet-Develop
0
14.11.2013
<end node> 5P9i0s8y19Z
dt=Text
<node>
Developing
1
The following descriptions can be partly outdated, in particular the section "Algorithms".
<end node> 5P9i0s8y19Z
dt=Text
<node>
Transmission Policy
2
== Gegenstände
Übertragen werden Transmissionsobjekte (T-Objekte). 
T-Objekte können sein: Transmissionssignale (system-eigen), Daten-Objekte und Datei-Objekte. Transmissionssignale werden dem Benutzer als solche nicht bekannt und dienen der Steuerung der Schicht. Von Transmissionssignalen abgeleitet können Kanalzustände, Ereignisse und das Ping-Objekt auftreten. Daten-Objekte sind Instanzen von registrierten Java-Klassen des Benutzers. Datei-Objekte sind vom Benutzer bereitgestellte Dateien des Dateisystems.

Transmissionssignale können an die Übertragung von anderen Objekten gebunden sein, sodaß sie zeitlich erst im Anschluß an eine Objektübertragung auftreten.

-- Einschränkungen
Der Größe nach sind T-Objekte nach ihrer Art unterschiedlich limitiert. Transmissionssignale unterliegen einer internen Beschränkung. Für Daten- und Datei-Objekte können anwendungsspezifische Beschränkungen eingestellt werden. Eine Beschränkung für Daten-Objekte ist voreingestellt (Maximum der Serialisierung), für Datei-Objekte dagegen nicht.

Objekt-Graphen
Innere Referenzen einer registrierten Klasse müssen nach ihrem Typ auflösbar sein, d.h. sie gehören der Menge wohldefinierter (sequenzierbarer) Objekttypen an. Solche Referenzen werden stets individuell zum Sequenzierungszeitpunkt ausgewertet und in die Übertragung eines Datenobjekts integriert. Graphen von Objekten werden folgerichtig wiederhergestellt, wenn sie von einem einzelnen Ursprung ausgehen, der als Übertragungsobjekt dient. Die Wiederherstellung gemeinsamer Referenzen auf ein identisches Objekt in verschiedenen Übertragungsobjekten ist nicht vorgesehen.

== Ordnungen
Übertragungen und Ereignisse sind nach Accounts geordnet, die "Connection" genannt werden. Jede Connection hat einen ausgehenden und einen einkommenden Kanal. Sendekanäle können in Subkanäle aufgeteilt sein, die einer Prioritätsmarkierung eines Sendeauftrags entsprechen. Darüber hinaus besitzt die Schicht, die "Server" genannt wird, die Möglichkeit, schichtspezifische Ereignisse zur An- und Abmeldung von Accounts zu verarbeiten bzw. auszugeben. Die Abfolge der Transmissionsobjekte ist identisch auf Sender- und Empfängerseite auf der Ebene der Subkanäle (Prioritätsklassen), d.h. für jeden Subkanal.

== Parallelität
Eingehende und ausgehende Kanäle sowohl eines einzelnen wie auch verschiedener Accounts können parallel betrieben werden. Ein Account besitzt jeweils einen Socket. In der Server-Schicht bestehen mehrere Accounts (Connections) nebeneinander, die einem einzelnen Server zugeordnet sind. Es können auch mehrere Server bestehen. Jede Connection besitzt mindestens zwei eigene Threads, nämlich Sende- und Empfangsthread. Es kann eingestellt werden, ob die Ausgabe von Ereignissen, die einen Account betreffen (z.B. empfangene Objekte) durch einen dritten, account-eigenen Thread (Ausgabethread) oder durch einen separaten schichteigenen Thread  (statisch) erfolgt.

== Statische Threads
Die JennyNet-Schicht unterteilt sich in die Client- und Server-Bereiche. (Es ist hier auch von "Clientschicht" und "Serverschicht" die Rede, da sie logisch verschiedenen Kommunikationsinstanzen zugeordnet sind. Beide Schichten können aber auch in einer einzigen Anwendung existieren.) Beide Bereiche besitzen jeweil zwei statische Threads, die der Kommunikation mit dem TCP-Netzwerk einerseits und der Benutzeranwendung andererseits dienen. Genauer sind diese ein Sendethread, der Sendeaufträge verschiedener Accounts sequenziell abarbeitet und ein Ausgabethread, der die Ereignisse, welche in den Accounts entstehen, sequenziell an die Anwendung ausgibt.

== Gliederung
T-Objekte werden zur Übertragung in T-Pakete aufgegliedert bzw. auf T-Pakete abgebildet. Die resultierenden Pakete sind die atomaren Übertragungseinheiten, ihre maximale Größe ist in Connection-Parametern einstellbar. 
Welche Pakete vorrangig zur Übertragung anberaumt werden, wird durch ein Prioritätsmerkmal (siehe Prioritätskanäle) sowie durch den Übetragungsdatentyp bestimmt. Alleinstehende Transmissionssignale haben immer die höchste Priorität. Einzelne Signale können im Verbund mit einzelnen Datenpaketen übertragen werden und verlieren damit ihre klassentypische Prioritätsstellung.

Die Übertragung erfolgt auf der Schicht TCP; deshalb wird davon ausgegangen, dass die Abfolge von T-Paketen sowie die Korrektheit der Daten bei der Übertragung kein Problem darstellt.

Priorisiert wird zuerst der Übertragungsdatentyp. Die Typen sind: Signal, Daten, Datei. Die T-Pakete sind jeweils einem dieser Typen zugeordnet.
Danach wird eine vom Benutzer gewählte Prioritätsstufe berücksichtigt. Es gibt 5 Prioritätsstufen: BOTTOM, LOW, NORMAL, HIGH und TOP. Die Default-Einstellung ist NORMAL.

Folgende Objektmerkmale kommen zum Einsatz (auch für Dateien):
* Objekt-ID (Seriennummer, eindeutig je Verbindung)
- Funktionsklasse: DATEI, DATEN, SIGNAL
- Objekt-Pfad (für Dateien)
- Serialisierungsmethode
* Prioritätsmerkmal
- Grösse des Serialisierungspuffers
- Anzahl der Pakete
- CRC32 über die Objektdaten (für Dateien)
(*: diese Daten werden nicht extra übertragen, da sie bereits im Paketkopf enthalten sind)

Folgende Paketmerkmale kommen zum Einsatz:
- Packet-Typkennzeichen (feste 8-Byte-Folge)
- Funktionsmerkmal (Signal, Daten, Datei)
- Prioritätsmerkmal (5 Prioritäts-Stufen)
- Objekt-ID (long-int)
- Paket-Seriennummer (eindeutig je Objekt)
- Größe der enthaltenen Nutzdaten (roh)

Paketfolge
Für jedes T-Objekt werden bei der Übertragung der Serialisierung die Objekt-Kopfdaten 
vorangestellt. Diese Kopfdaten sind immer in einer Paket-Seriennummer 0 enthalten.
Die Kopfdaten enthalten die Objektmerkmale und dienen dem Empfänger dazu, 
Ressourcen für den Empfang bereitzustellen oder den Empfang abzulehnen.
Die Übertragung eines Objekts endet wenn alle zugeordneten Datenpakete 
übertragen sind.

Folgende Signalisierungsobjekte zur Übertragungssteuerung sind definiert:
- ALIVE : Alive Signal zur Verifizierung der Tüchtigkeit der Station
                  (wird regelmäßig gesendet wenn keine Übertragung stattfindet)
- TEMPO (Stufe) : Anfrage, das Sendetempo einzurichten (unverbindlich)
- BREAK (Objekt-ID, Cause) : Übertragung des Objekts wird abgebrochen
- FAIL : eine kommunikative Operation hatte keinen Erfolg
- PING (id) : Aktivitätsanfrage (mit Seriennummer)
- ECHO (id) : Aktivitätsantwort (mit Seriennummer)

== Sortierungsfolge der Sendepakete (Sendethread)

- Objekt-Priorität, 2-byte int		3-stellige Ziffernfolge
- T-Objekt-Nummer, 8-byte int		aufsteigende Nummern je Account
- Paket-Sequenznummer, 4-byte int	aufsteigende Nummern je T-Objekt

Objekt-Priorität:  1. Stelle ungenutzt, Wert = 5
	   2. Stelle Funktion 3 = Signal, 5 = Objekt, 7 = Datei
	   3. Stelle Prioritätskanal 3 = hoch. 5 = normal, 7 = niedrig



<end node> 5P9i0s8y19Z
dt=Text
<node>
Closure
2
== Implementation Details on Closure of a Connection

To perform the logic of connection closure, two special signals are used (exchanged between hosts).

-- enter_shutdown
Sending of this signal occurs when the regular close command has been called locally and the connection enters into SHUTDOWN state.
Reception of this signal implies that the remote end has entered the SHUTDOWN state (regular close). The local SHUTDOWN state is assumed and a corresponding connection event issued.

-- all_data_sent
This signal is sent while the connection is in the SHUTDOWN state and the last send-order has been completed. Following this the connection waits for the same signal from the remote end, if it has not been received already, and if both local and remote signals are ready, the CLOSED state is assumed with a suitabe code for the cause.



<end node> 5P9i0s8y19Z
dt=Text
<node>
Internal Value Sets
2
= INTERNAL VALUE SETS
These values are only relevant for programming.

== Info Values of BREAK Signals on Reception
Signal	Remote	Remote Meaning
    1	102	file assignment error (receiving)
    2	103	timeout waiting for CONFIRM on file-transfer (sending)
    3	108	file transfer broken by local user (incoming)
    4	105	file transfer broken by local user (outgoing)
    5	114	dropping incoming file-transfer (local closing)
    6	113	dropping outgoing file-transfer (local closing)

== Info Values of FAIL Signals on Reception
Signal	Remote	Remote Meaning
    1	102	destination realisation error
    2	103	timeout waiting for CONFIRM
    3	118	storage CRC error
    4	201,203,205	object sending broken
    5	-	de-serialisation failed at receiver
    6	-	no receive-serialisation at receiver

<end node> 5P9i0s8y19Z
dt=Text
<node>
Limits Organisation
2
<end node> 5P9i0s8y19Z
dt=Text
<node>
TEMPO
3
= TEMPO Organisation

TEMPO is a Baud value (bytes per second) associated as a property of the connection. This limitation is approximately realised in the sending (OUTGOING) direction. We have no limitations on the reception channel. 

TEMPO can be set by any side of a connection and sets both sides' sending speed. The setting can be suppressed for the client side if the server has activated a blockage. In this case only the server can set the speed property, an attempt of the client fails undone.

TEMPO limitation is performed as a thread sleeping phase of the Input-Processor (dealing with user-objects) or any of the file-sending processors (SendFileProcessor).

-- CODE
ConnectionImpl
private void delay_baud ()		basic function
protected void queueParcelForSending ()	posting parcels for sending in coreSend

<end node> 5P9i0s8y19Z
dt=Text
<node>
Algorithms
2
<end node> 5P9i0s8y19Z
dt=Text
<node>
Receiving Branch
3
OBJECT RECEPTION

Describes algorithm how user objects are received by this transport layer.

Object-Delivery occurs on the receiving threads of connections. User application should not delay such tasks. Delivery events by principle occur parallel, however the layer can be determined to synchronise these events to one at a time through a semaphore.

== Receive a Parcel
- read bytes from the network until the PARCEL-TYPE-MARKER appears
- read the fix-format values of the parcel
- read the data segment of the parcel

== Digest a Parcel
- test validity (plausibility) of parcel data
- if parcel is a HEADER parcel (ser-nr == 0)
   - if object-nr (remote) is already known in receiving-objects-list
      or object-nr is in the done-objects-set
      -  write failure entry into Log file
      - return
   - create a new agglomeration object according to transmission type
   - integrate agglomeration object in receiving-objects-list
- otherwise
   - search agglomeration object according to object-nr in parcel
   - if agglomeration not found
      - write failure entry into Log file
   - otherwise
      - extend agglomeration data
      - if parcel was last parcel of agglomeration
         - call end-transmission on agglomeration

== Object-Agglomeration:end-transmission
- test if object is orderly completed (exception)
- deserialise object data into an instance
- if object-type is a SIGNAL
   - call incoming-signal-delivery
- otherwise
   - post object-delivery event to notify user

== File-Agglomeration:end-transmission
- test if file data is orderly completed (exception)
- rename intermediary target file into final target file name
- post file-delivery event to notify user
- if user opted file-deletion in event
   - delete target file


<end node> 5P9i0s8y19Z
dt=Text
<node>
Sending Branch
3
OBJECT SENDING

Describes algorithm how user objects are sent by this transport layer.

1)  Object entry occurs on the user thread by pushing a sendable object onto the input-object-queue. At this point viability of the object is controlled and violation reported to the calling thread by an exception.

2)  Sending thread of connection fetches the object from the send-queue and performs its serialisation. A send-priority is determined which is valid for all resulting send-data. The serialisation (sequence of bytes) is split into sending parcels, parcel objects are created and placed into the sorted send-parcel-queue.

The Send-Parcel-Queue is a priority queue which is ordered on "comparable" features of the parcel.
For sorting details see "Transmission Policy".

3)  Sending thread performs its sending task by sending off to the network parcels available in the send-parcel-queue. This task may be time-limited so that not all parcels are guaranteed to be sent off when the sending thread returns.

- - - - - - - - - - - -
Details of the Sending Thread

The sending thread has two separate tasks to fulfil: A) serialisation of input objects and B) sending off send-parcels.

== Serialisation Task
- examine the input-object-queue
- if the queue is empty and the send-parcel-queue is unfinished (not empty)
         immediately return
- otherwise
      - fetch an object from the input-queue (may cause waiting)
      - if not interrupted
          - serialise object
          - put all resulting send-parcels into the send-parcel-queue
      - return

== Send-Parcel Task
- examine the send-parcel-queue
- if the queue is empty
   - return
- otherwise
   - note the start time of this task
   - while the queue is not empty
      - if TEMPO is set
         - delay for the minimum wait time for parcel frequency
      - peek send-parcel
      synchronized (x) {
      - if interrupted 
          - eliminate interruption state
      - if terminated
         - return
      - send parcel on underlying network (may cause IO-exception)
        }
      - pop send-parcel from queue
      - if the task time limit is exceeded
         - return

== run
do while not terminated and no exception
    - serialisation task
    - if not terminated
       - send-parcel-task

== Interrupt Send-Thread
synchronized (x) {
    interrupt sending thread
}

== Terminate
- set terminate signal
- interrupt send-thread

== Set TEMPO in Baud



<end node> 5P9i0s8y19Z
dt=Text
<node>
Milestones
2
<end node> 5P9i0s8y19Z
dt=Text
<node>
1.0
3
<end node> 5P9i0s8y19Z
dt=Text
<node>
1.1
3
<end node> 5P9i0s8y19Z
dt=Text
<node>
Desiderata
4
-- length limitation for file-transfers (con-parameters)
-- do we need CRC calculation for TransmissionParcel ?
-- ALIVE signal sending only when there is a transmission gap of relevant length

-- max number of connections in server
-- optional ZIP-ing of byte-arrays in 'sendData()' methods

<end node> 5P9i0s8y19Z
